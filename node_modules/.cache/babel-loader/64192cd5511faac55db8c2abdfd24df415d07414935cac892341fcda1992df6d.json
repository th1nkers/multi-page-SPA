{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\surya\\\\Desktop\\\\12-adv-starting-project\\\\frontend\\\\src\\\\pages\\\\Events.js\",\n  _s = $RefreshSig$();\nimport { useLoaderData } from 'react-router-dom';\nimport EventsList from '../components/EventsList';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction EventsPage() {\n  _s();\n  const data = useLoaderData();\n  // if(data.isError){\n  //   return <p>{data.message}</p>\n  // }\n  const events = data.events;\n  return /*#__PURE__*/_jsxDEV(EventsList, {\n    events: events\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 12,\n    columnNumber: 10\n  }, this);\n}\n_s(EventsPage, \"5thj+e1edPyRpKif1JmVRC6KArE=\", false, function () {\n  return [useLoaderData];\n});\n_c = EventsPage;\nexport default EventsPage;\n//////////////////////////\nexport async function loader() {\n  const response = await fetch('http://localhost:8080/events');\n  if (!response.ok) {\n    // return {isError: true, message: 'Could not fetch events.'}\n    // throw new Response(JSON.stringify({message:'could not fetch events.'}), {status: 500});\n    return JSON({\n      message: 'could not fetch events.'\n    }, {\n      status: 500\n    });\n  } else {\n    return response;\n  }\n}\nvar _c;\n$RefreshReg$(_c, \"EventsPage\");","map":{"version":3,"names":["useLoaderData","EventsList","jsxDEV","_jsxDEV","EventsPage","_s","data","events","fileName","_jsxFileName","lineNumber","columnNumber","_c","loader","response","fetch","ok","JSON","message","status","$RefreshReg$"],"sources":["C:/Users/surya/Desktop/12-adv-starting-project/frontend/src/pages/Events.js"],"sourcesContent":[" import { useLoaderData } from 'react-router-dom';\r\nimport EventsList from '../components/EventsList';\r\n\r\nfunction EventsPage() {\r\n\r\n  const data = useLoaderData();\r\n  // if(data.isError){\r\n  //   return <p>{data.message}</p>\r\n  // }\r\n  const events = data.events;\r\n\r\n  return <EventsList events={events} />\r\n}\r\n\r\nexport default EventsPage;\r\n//////////////////////////\r\nexport async function loader(){\r\n\r\n    const response = await fetch('http://localhost:8080/events');\r\n\r\n    if (!response.ok) {\r\n      // return {isError: true, message: 'Could not fetch events.'}\r\n      // throw new Response(JSON.stringify({message:'could not fetch events.'}), {status: 500});\r\n      return JSON({message:'could not fetch events.'}, {status:500});\r\n    } else {\r\n      return response;\r\n    }\r\n}"],"mappings":";;AAAC,SAASA,aAAa,QAAQ,kBAAkB;AACjD,OAAOC,UAAU,MAAM,0BAA0B;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAElD,SAASC,UAAUA,CAAA,EAAG;EAAAC,EAAA;EAEpB,MAAMC,IAAI,GAAGN,aAAa,EAAE;EAC5B;EACA;EACA;EACA,MAAMO,MAAM,GAAGD,IAAI,CAACC,MAAM;EAE1B,oBAAOJ,OAAA,CAACF,UAAU;IAACM,MAAM,EAAEA;EAAO;IAAAC,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,QAAG;AACvC;AAACN,EAAA,CATQD,UAAU;EAAA,QAEJJ,aAAa;AAAA;AAAAY,EAAA,GAFnBR,UAAU;AAWnB,eAAeA,UAAU;AACzB;AACA,OAAO,eAAeS,MAAMA,CAAA,EAAE;EAE1B,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,8BAA8B,CAAC;EAE5D,IAAI,CAACD,QAAQ,CAACE,EAAE,EAAE;IAChB;IACA;IACA,OAAOC,IAAI,CAAC;MAACC,OAAO,EAAC;IAAyB,CAAC,EAAE;MAACC,MAAM,EAAC;IAAG,CAAC,CAAC;EAChE,CAAC,MAAM;IACL,OAAOL,QAAQ;EACjB;AACJ;AAAC,IAAAF,EAAA;AAAAQ,YAAA,CAAAR,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}