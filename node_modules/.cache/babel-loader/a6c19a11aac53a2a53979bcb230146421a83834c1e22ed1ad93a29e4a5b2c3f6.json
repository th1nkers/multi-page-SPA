{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\surya\\\\Desktop\\\\12-adv-starting-project\\\\frontend\\\\src\\\\pages\\\\NewEvent.js\";\nimport React from 'react';\nimport { json, redirect } from 'react-router-dom';\nimport EventForm from '../components/EventForm';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst NewEventPage = () => {\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(EventForm, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 11,\n      columnNumber: 5\n    }, this)\n  }, void 0, false);\n};\n_c = NewEventPage;\nexport default NewEventPage;\nexport async function action(_ref) {\n  let {\n    request,\n    params\n  } = _ref;\n  const data = await request.formData();\n  const eventData = {\n    title: data.get('title'),\n    image: data.get('image'),\n    date: data.get('date'),\n    description: data.get('description')\n  };\n  const response = await fetch('http://localhost:8080/events', {\n    method: 'POST',\n    headers: {\n      'Content-type': 'application/json'\n    },\n    body: JSON.stringify(eventData)\n  });\n  if (response.status === 422) if (!response.ok) {\n    throw json({\n      message: 'Could not save event.'\n    }, {\n      status: 500\n    });\n  }\n  return redirect('/events');\n}\nvar _c;\n$RefreshReg$(_c, \"NewEventPage\");","map":{"version":3,"names":["React","json","redirect","EventForm","jsxDEV","_jsxDEV","Fragment","_Fragment","NewEventPage","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","action","_ref","request","params","data","formData","eventData","title","get","image","date","description","response","fetch","method","headers","body","JSON","stringify","status","ok","message","$RefreshReg$"],"sources":["C:/Users/surya/Desktop/12-adv-starting-project/frontend/src/pages/NewEvent.js"],"sourcesContent":["import React from 'react'\r\nimport { json, redirect } from 'react-router-dom'\r\nimport EventForm from '../components/EventForm'\r\n\r\nconst NewEventPage = () => {\r\n\r\n  \r\n\r\n  return (\r\n    <>\r\n    <EventForm/>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default NewEventPage\r\n\r\nexport async function action({request,params}){\r\n  const data = await  request.formData();\r\n\r\n  const eventData = {\r\n   title:  data.get('title'),\r\n   image: data.get('image'),\r\n   date: data.get('date'),\r\n   description: data.get('description')\r\n  }\r\n\r\n  const response = await fetch('http://localhost:8080/events', {\r\n    method: 'POST',\r\n    headers: {\r\n      'Content-type': 'application/json'\r\n    },\r\n    body: JSON.stringify(eventData)\r\n  })\r\n\r\n  if (response.status === 422)\r\n\r\n  if(!response.ok){\r\n    throw json({message: 'Could not save event.'},{status: 500});\r\n  }\r\n\r\n  return redirect('/events');\r\n}"],"mappings":";AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,IAAI,EAAEC,QAAQ,QAAQ,kBAAkB;AACjD,OAAOC,SAAS,MAAM,yBAAyB;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAAA,SAAAC,QAAA,IAAAC,SAAA;AAE/C,MAAMC,YAAY,GAAGA,CAAA,KAAM;EAIzB,oBACEH,OAAA,CAAAE,SAAA;IAAAE,QAAA,eACAJ,OAAA,CAACF,SAAS;MAAAO,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAE,iBACT;AAEP,CAAC;AAAAC,EAAA,GATKN,YAAY;AAWlB,eAAeA,YAAY;AAE3B,OAAO,eAAeO,MAAMA,CAAAC,IAAA,EAAkB;EAAA,IAAjB;IAACC,OAAO;IAACC;EAAM,CAAC,GAAAF,IAAA;EAC3C,MAAMG,IAAI,GAAG,MAAOF,OAAO,CAACG,QAAQ,EAAE;EAEtC,MAAMC,SAAS,GAAG;IACjBC,KAAK,EAAGH,IAAI,CAACI,GAAG,CAAC,OAAO,CAAC;IACzBC,KAAK,EAAEL,IAAI,CAACI,GAAG,CAAC,OAAO,CAAC;IACxBE,IAAI,EAAEN,IAAI,CAACI,GAAG,CAAC,MAAM,CAAC;IACtBG,WAAW,EAAEP,IAAI,CAACI,GAAG,CAAC,aAAa;EACpC,CAAC;EAED,MAAMI,QAAQ,GAAG,MAAMC,KAAK,CAAC,8BAA8B,EAAE;IAC3DC,MAAM,EAAE,MAAM;IACdC,OAAO,EAAE;MACP,cAAc,EAAE;IAClB,CAAC;IACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACZ,SAAS;EAChC,CAAC,CAAC;EAEF,IAAIM,QAAQ,CAACO,MAAM,KAAK,GAAG,EAE3B,IAAG,CAACP,QAAQ,CAACQ,EAAE,EAAC;IACd,MAAMlC,IAAI,CAAC;MAACmC,OAAO,EAAE;IAAuB,CAAC,EAAC;MAACF,MAAM,EAAE;IAAG,CAAC,CAAC;EAC9D;EAEA,OAAOhC,QAAQ,CAAC,SAAS,CAAC;AAC5B;AAAC,IAAAY,EAAA;AAAAuB,YAAA,CAAAvB,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}